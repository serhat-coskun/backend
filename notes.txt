
1- Create an app: python3 manage.py startapp <appname>

2- Add the app to INSTALLED_APPS list in the setup.py

For the app named xyz: add xyz.apps.XyzConfig
Note that xyz uses camel case this is the name of app config class in the xyz.apps file.


3-  Note that we need 4 files for fully functional page service

.. model.py : define db models
.. views.py : using models.py and template.html services the page
.. template.html : defines html to be rendered by views with data from models
.. urls.py : connects a url to views.py view


4- If we are developing a static web page, we do not need to use models


5- Create a valid view using models.py and template html, following 3 techniqes:
	.. function based, returns a rendered template
	.. view class based
	.. generic view class based

6- Bind view with a url, in the myAppName/urls.py which we will create
   Note we will use django.urls.path and need to import our views to access view   function or class.
   
   Using path(route, viewFunction or Class, name =<Name>)
   route is a regular expression
   while naming prefer names appName-name so that url name's does not clash

7- Need to include app url.py into project url.py
   Need django.urls.include
   Using:


   path("", include("appname.urls"))

8- Project urls.py is a gateway to each apps urls.py





NEW STUDY


1- Do everyting necesary to setup the project
	
	
	create a folder with project-name
	create a envorinment python3 -m venv .venv
	pip install django
	django-admin startproject django_project

2- Create a app to work on and repeat this to add more apps

	Enter the project folder django_project to access manage.py
	python3 manage.py startapp app_name
	install app to the project by adding, app_name.apps.AppNameConfig to the setup.py INSTALLED_APPS
	
3- For the templates 

	create template folder BASE_DIR/templates
	in the setup.py, TEMPLATES add BASE_DIR/ "templates" to the DIR field


4- Create urls for app

	Create urls.py for the app
	Import views and assign them to urls in url_pattern list using path(.)
	Design the url here
	Don't forget to give a name for future reverse(.) uses
	In the project's url folder use write without and trail include(app_name.urls)
		so that in the future any url added to app_name.urls will be reflected for the project


5- For the primary cycle is create views, assign the url in urls.py, create models
	
	For example,
	Create view boilerplate
	Create url pattern and add to urls for the view
	Create necessary model for the view
	Implement the view using the request info, and database info


TESTING WITH DATABASE

In contrast with testing static pages, this requires unittest classes to use TestCase not SimpleTestCase
Remember that to use test we write them to app_name.tests and call python3 manage.py test to run them
There are unique constructs to be used for tests.


